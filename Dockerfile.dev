FROM nikolaik/python-nodejs:python3.12-nodejs22-slim

# Use Docker BuildKit for better caching and faster builds
ARG DOCKER_BUILDKIT=1
ARG BUILDKIT_INLINE_CACHE=1
# Enable BuildKit for Docker-Compose
ARG COMPOSE_DOCKER_CLI_BUILD=1

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

# Configure apt and install packages
# I had to add --insecure since curl didn't work...
RUN apt-get update && \
    apt-get install -y --no-install-recommends docker.io docker-compose apt-utils build-essential dialog \
    curl netcat-traditional iputils-ping unzip dos2unix gcc 2>&1 && \
    # Verify git, process tools, lsb-release (common in install instructions for CLIs) installed
    apt-get install -y --no-install-recommends sudo git redis-server libpq-dev sass \
    procps iproute2 lsb-release gnupg apt-transport-https \
    g++ protobuf-compiler libprotobuf-dev && \
    # Clean up
    apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /workspace

# Install Poetry with the root user
# Ensure pip is the latest version
RUN pip install --upgrade pip poetry && \
    # Create a virtualenv at .venv in /workspace directory so we can easily see the site-packages
    poetry config virtualenvs.create true && \
    poetry config virtualenvs.in-project true && \
    poetry config virtualenvs.path "/workspace/.venv"

# BEFORE installing packages with Poetry (so "user" has permissions in future),
# set the user so nobody can run as root on the Docker host (security)
# USER $USER_UID_OLD
# USER $USER_UID_NEW
# ARG TEST=testing

# Copy my preferred .bashrc to /root/ so that it's automatically "sourced" when the container starts
COPY .bashrc /root/

# For Dash boilerplate components
EXPOSE 8050

# Copy the entrypoint script to install the Python and Node dependencies if the .venv or node_modules directories don't exist
COPY entrypoint.dev.sh poetry.toml ./
RUN chmod +x entrypoint.dev.sh
# ENTRYPOINT ["entrypoint.dev.sh"]
